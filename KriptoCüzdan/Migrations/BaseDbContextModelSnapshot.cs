// <auto-generated />
using KriptoCüzdan.repository;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace KriptoCüzdan.Migrations
{
    [DbContext(typeof(BaseDbContext))]
    partial class BaseDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("KriptoCüzdan.model.entity.Alım", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Alım");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Kripto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AlımId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Kripto_1_Id")
                        .HasColumnType("int");

                    b.Property<int>("SatımId")
                        .HasColumnType("int");

                    b.Property<double>("değer")
                        .HasColumnType("float");

                    b.Property<double>("lot")
                        .HasColumnType("float");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AlımId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Kripto_1_Id");

                    b.HasIndex("SatımId");

                    b.ToTable("Kriptos");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Kripto_1_", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("kripto_1s");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Satım", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Satım");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Kripto", b =>
                {
                    b.HasOne("KriptoCüzdan.model.entity.Alım", "Alım")
                        .WithMany("kriptos")
                        .HasForeignKey("AlımId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KriptoCüzdan.model.entity.Category", "Category")
                        .WithMany("kriptos")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KriptoCüzdan.model.entity.Kripto_1_", "Kripto_1_")
                        .WithMany("kriptos")
                        .HasForeignKey("Kripto_1_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("KriptoCüzdan.model.entity.Satım", "Satım")
                        .WithMany()
                        .HasForeignKey("SatımId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Alım");

                    b.Navigation("Category");

                    b.Navigation("Kripto_1_");

                    b.Navigation("Satım");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Alım", b =>
                {
                    b.Navigation("kriptos");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Category", b =>
                {
                    b.Navigation("kriptos");
                });

            modelBuilder.Entity("KriptoCüzdan.model.entity.Kripto_1_", b =>
                {
                    b.Navigation("kriptos");
                });
#pragma warning restore 612, 618
        }
    }
}
